% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ChIPtSNE.R
\name{ConfigFeatures.files}
\alias{ConfigFeatures.files}
\title{QcConfigFeatures}
\usage{
ConfigFeatures.files(
  file_paths,
  file_paths.input = character(),
  run_separately = TRUE,
  sample_names = NULL,
  sample_names.split = NULL,
  group_names = NULL,
  group_name.input = "input",
  group_colors = NULL,
  feature_load_FUN = NULL,
  n_peaks = 1000,
  balance_groups = FALSE,
  overlap_extension = 0,
  consensus_fraction = getOption("SQC_CONSENSUS_FRACTION", 0),
  consensus_n = getOption("SQC_CONSENSUS_N", 1),
  process_features = getOption("SQC_PROCESS_FEATURES", TRUE)
)
}
\arguments{
\item{file_paths}{character paths to files}

\item{run_separately}{If TRUE, each item is considered a separate group. Default is TRUE.}

\item{group_names}{vector of group names to assign from according to groups}

\item{group_colors}{vector of colors to use per group}

\item{feature_load_FUN}{function that takes a vector of file paths and returns list of GRanges.}

\item{n_peaks}{number of peaks to subset for}

\item{balance_groups}{If TRUE, will attempt to represent imbalanced groups more equally}

\item{overlap_extension}{bp to extends regions by before calculating overlaps}

\item{consensus_fraction}{A numeric between 0 and 1 specifying the fraction of grs that must overlap to be considered consensus.}

\item{consensus_n}{An integer number specifying the absloute minimum of input grs that must overlap for a site to be considered consensus.}

\item{process_features}{if TRUE, features are loaded and overlapped to generate assement regions as part of creating QcConfigFeatures object}
}
\value{
QcConfigFeatures object

QcConfigFeatures object

a QcConfigFeatures object

A QcConfigFeatures object

Invisibly returns path to written config file.
}
\description{
See the example feature config file system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv").
}
\details{
Or create a config file using QcConfigFeatures.save_config after making one using a different method.
}
\section{Slots}{


\describe{
\item{\code{feature_load_FUN}}{function.}

\item{\code{n_peaks}}{numeric.}

\item{\code{consensus_fraction}}{numeric.}

\item{\code{consensus_n}}{numeric.}
}
}

\examples{
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
config_df = .parse_config_body(feature_config_file)
config_df$file = file.path(system.file(package = "ssvQC", "extdata"), config_df$file)
feature_conf = QcConfigFeatures(config_df, process_features = TRUE)
QcConfigFeatures.null()
np_files = dir(system.file(package = "ssvQC", "extdata"), pattern = "Peak$", full.names = TRUE)
object = QcConfigFeatures.files(np_files, balance_groups = TRUE)
object = ssvQC.prepFeatures(object)
plot(object)

object = QcConfigFeatures.files(np_files, 
  group_names = c("10A", "AT1", "CA1"), 
  sample_names = c("MCF10A_CTCF", "MCF10AT1_CTCF", "MCF10CA1a_CTCF"))
object = ssvQC.prepFeatures(object)
plot(object)
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
object = QcConfigFeatures.parse(feature_config_file)
plot(object)
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
feature_config = QcConfigFeatures.parse(feature_config_file)
}
